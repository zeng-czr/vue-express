{"remainingRequest":"C:\\Users\\ht\\Desktop\\vue-express\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\ht\\Desktop\\vue-express\\src\\components\\uploadExcel\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\ht\\Desktop\\vue-express\\src\\components\\uploadExcel\\index.vue","mtime":1696757461823},{"path":"C:\\Users\\ht\\Desktop\\vue-express\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1696052662415},{"path":"C:\\Users\\ht\\Desktop\\vue-express\\node_modules\\babel-loader\\lib\\index.js","mtime":1696052663280},{"path":"C:\\Users\\ht\\Desktop\\vue-express\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1696052662415},{"path":"C:\\Users\\ht\\Desktop\\vue-express\\node_modules\\vue-loader\\lib\\index.js","mtime":1696052663650}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQppbXBvcnQgWExTWCBmcm9tICd4bHN4Jw0KDQpleHBvcnQgZGVmYXVsdCB7DQogIHByb3BzOiB7DQogICAgYmVmb3JlVXBsb2FkOiBGdW5jdGlvbiwgLy8gZXNsaW50LWRpc2FibGUtbGluZQ0KICAgIG9uU3VjY2VzczogRnVuY3Rpb24vLyBlc2xpbnQtZGlzYWJsZS1saW5lDQogIH0sDQogIGRhdGEoKSB7DQogICAgcmV0dXJuIHsNCiAgICAgIGxvYWRpbmc6IGZhbHNlLA0KICAgICAgZXhjZWxEYXRhOiB7DQogICAgICAgIGhlYWRlcjogbnVsbCwNCiAgICAgICAgcmVzdWx0czogbnVsbA0KICAgICAgfQ0KICAgIH0NCiAgfSwNCiAgbWV0aG9kczogew0KICAgIGdlbmVyYXRlRGF0YSh7IGhlYWRlciwgcmVzdWx0cyB9KSB7DQogICAgICB0aGlzLmV4Y2VsRGF0YS5oZWFkZXIgPSBoZWFkZXINCiAgICAgIHRoaXMuZXhjZWxEYXRhLnJlc3VsdHMgPSByZXN1bHRzDQogICAgICB0aGlzLm9uU3VjY2VzcyAmJiB0aGlzLm9uU3VjY2Vzcyh0aGlzLmV4Y2VsRGF0YSkNCiAgICB9LA0KICAgIGhhbmRsZURyb3AoZSkgew0KICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKQ0KICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpDQogICAgICBpZiAodGhpcy5sb2FkaW5nKSByZXR1cm4NCiAgICAgIGNvbnN0IGZpbGVzID0gZS5kYXRhVHJhbnNmZXIuZmlsZXMNCiAgICAgIGlmIChmaWxlcy5sZW5ndGggIT09IDEpIHsNCiAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcignT25seSBzdXBwb3J0IHVwbG9hZGluZyBvbmUgZmlsZSEnKQ0KICAgICAgICByZXR1cm4NCiAgICAgIH0NCiAgICAgIGNvbnN0IHJhd0ZpbGUgPSBmaWxlc1swXSAvLyBvbmx5IHVzZSBmaWxlc1swXQ0KDQogICAgICBpZiAoIXRoaXMuaXNFeGNlbChyYXdGaWxlKSkgew0KICAgICAgICB0aGlzLiRtZXNzYWdlLmVycm9yKCdPbmx5IHN1cHBvcnRzIHVwbG9hZCAueGxzeCwgLnhscywgLmNzdiBzdWZmaXggZmlsZXMnKQ0KICAgICAgICByZXR1cm4gZmFsc2UNCiAgICAgIH0NCiAgICAgIHRoaXMudXBsb2FkKHJhd0ZpbGUpDQogICAgICBlLnN0b3BQcm9wYWdhdGlvbigpDQogICAgICBlLnByZXZlbnREZWZhdWx0KCkNCiAgICB9LA0KICAgIGhhbmRsZURyYWdvdmVyKGUpIHsNCiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCkNCiAgICAgIGUucHJldmVudERlZmF1bHQoKQ0KICAgICAgZS5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9ICdjb3B5Jw0KICAgIH0sDQogICAgaGFuZGxlVXBsb2FkKCkgew0KICAgICAgdGhpcy4kcmVmc1snZXhjZWwtdXBsb2FkLWlucHV0J10uY2xpY2soKQ0KICAgIH0sDQogICAgaGFuZGxlQ2xpY2soZSkgew0KICAgICAgY29uc3QgZmlsZXMgPSBlLnRhcmdldC5maWxlcw0KICAgICAgY29uc3QgcmF3RmlsZSA9IGZpbGVzWzBdIC8vIG9ubHkgdXNlIGZpbGVzWzBdDQogICAgICBjb25zb2xlLmxvZyhyYXdGaWxlKQ0KICAgICAgaWYgKCFyYXdGaWxlKSByZXR1cm4NCiAgICAgIHRoaXMudXBsb2FkKHJhd0ZpbGUpDQogICAgfSwNCiAgICB1cGxvYWQocmF3RmlsZSkgew0KICAgICAgdGhpcy4kcmVmc1snZXhjZWwtdXBsb2FkLWlucHV0J10udmFsdWUgPSBudWxsIC8vIGZpeCBjYW4ndCBzZWxlY3QgdGhlIHNhbWUgZXhjZWwNCg0KICAgICAgaWYgKCF0aGlzLmJlZm9yZVVwbG9hZCkgew0KICAgICAgICB0aGlzLnJlYWRlckRhdGEocmF3RmlsZSkNCiAgICAgICAgcmV0dXJuDQogICAgICB9DQogICAgICBjb25zdCBiZWZvcmUgPSB0aGlzLmJlZm9yZVVwbG9hZChyYXdGaWxlKQ0KICAgICAgaWYgKGJlZm9yZSkgew0KICAgICAgICB0aGlzLnJlYWRlckRhdGEocmF3RmlsZSkNCiAgICAgIH0NCiAgICB9LA0KICAgIHJlYWRlckRhdGEocmF3RmlsZSkgew0KICAgICAgdGhpcy5sb2FkaW5nID0gdHJ1ZQ0KICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsNCiAgICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKQ0KICAgICAgICByZWFkZXIub25sb2FkID0gZSA9PiB7DQogICAgICAgICAgY29uc3QgZGF0YSA9IGUudGFyZ2V0LnJlc3VsdA0KICAgICAgICAgIGNvbnN0IHdvcmtib29rID0gWExTWC5yZWFkKGRhdGEsIHsgdHlwZTogJ2FycmF5JyB9KQ0KICAgICAgICAgIGNvbnN0IGZpcnN0U2hlZXROYW1lID0gd29ya2Jvb2suU2hlZXROYW1lc1swXQ0KICAgICAgICAgIGNvbnN0IHdvcmtzaGVldCA9IHdvcmtib29rLlNoZWV0c1tmaXJzdFNoZWV0TmFtZV0NCiAgICAgICAgICBjb25zdCBoZWFkZXIgPSB0aGlzLmdldEhlYWRlclJvdyh3b3Jrc2hlZXQpDQogICAgICAgICAgY29uc3QgcmVzdWx0cyA9IFhMU1gudXRpbHMuc2hlZXRfdG9fanNvbih3b3Jrc2hlZXQpDQogICAgICAgICAgdGhpcy5nZW5lcmF0ZURhdGEoeyBoZWFkZXIsIHJlc3VsdHMgfSkNCiAgICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZQ0KICAgICAgICAgIHJlc29sdmUoKQ0KICAgICAgICB9DQogICAgICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihyYXdGaWxlKQ0KICAgICAgfSkNCiAgICB9LA0KICAgIGdldEhlYWRlclJvdyhzaGVldCkgew0KICAgICAgY29uc3QgaGVhZGVycyA9IFtdDQogICAgICBjb25zdCByYW5nZSA9IFhMU1gudXRpbHMuZGVjb2RlX3JhbmdlKHNoZWV0WychcmVmJ10pDQogICAgICBsZXQgQw0KICAgICAgY29uc3QgUiA9IHJhbmdlLnMucg0KICAgICAgLyogc3RhcnQgaW4gdGhlIGZpcnN0IHJvdyAqLw0KICAgICAgZm9yIChDID0gcmFuZ2Uucy5jOyBDIDw9IHJhbmdlLmUuYzsgKytDKSB7IC8qIHdhbGsgZXZlcnkgY29sdW1uIGluIHRoZSByYW5nZSAqLw0KICAgICAgICBjb25zdCBjZWxsID0gc2hlZXRbWExTWC51dGlscy5lbmNvZGVfY2VsbCh7IGM6IEMsIHI6IFIgfSldDQogICAgICAgIC8qIGZpbmQgdGhlIGNlbGwgaW4gdGhlIGZpcnN0IHJvdyAqLw0KICAgICAgICBsZXQgaGRyID0gJ1VOS05PV04gJyArIEMgLy8gPC0tIHJlcGxhY2Ugd2l0aCB5b3VyIGRlc2lyZWQgZGVmYXVsdA0KICAgICAgICBpZiAoY2VsbCAmJiBjZWxsLnQpIGhkciA9IFhMU1gudXRpbHMuZm9ybWF0X2NlbGwoY2VsbCkNCiAgICAgICAgaGVhZGVycy5wdXNoKGhkcikNCiAgICAgIH0NCiAgICAgIHJldHVybiBoZWFkZXJzDQogICAgfSwNCiAgICBpc0V4Y2VsKGZpbGUpIHsNCiAgICAgIHJldHVybiAvXC4oeGxzeHx4bHN8Y3N2KSQvLnRlc3QoZmlsZS5uYW1lKQ0KICAgIH0NCiAgfQ0KfQ0K"},{"version":3,"sources":["index.vue"],"names":[],"mappingsfile":"index.vue","sourceRoot":"src/components/uploadExcel","sourcesContent":["<template>\r\n  <div class=\"uploadComponent\">\r\n    <input ref=\"excel-upload-input\" class=\"input\" type=\"file\" accept=\".xlsx , .xls\" @change=\"handleClick\">\r\n    <div class=\"drop\" @drop=\"handleDrop\" @dragover=\"handleDragover\" @dragenter=\"handleDragover\">\r\n      <i class=\"el-icon-upload\" style=\"font-size: 60px; color: #727272;\"></i><br/>\r\n      <p>Drop excel file here or <em :loading=\"loading\" size=\"mini\" type=\"primary\" @click=\"handleUpload\">Browse</em></p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport XLSX from 'xlsx'\r\n\r\nexport default {\r\n  props: {\r\n    beforeUpload: Function, // eslint-disable-line\r\n    onSuccess: Function// eslint-disable-line\r\n  },\r\n  data() {\r\n    return {\r\n      loading: false,\r\n      excelData: {\r\n        header: null,\r\n        results: null\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    generateData({ header, results }) {\r\n      this.excelData.header = header\r\n      this.excelData.results = results\r\n      this.onSuccess && this.onSuccess(this.excelData)\r\n    },\r\n    handleDrop(e) {\r\n      e.stopPropagation()\r\n      e.preventDefault()\r\n      if (this.loading) return\r\n      const files = e.dataTransfer.files\r\n      if (files.length !== 1) {\r\n        this.$message.error('Only support uploading one file!')\r\n        return\r\n      }\r\n      const rawFile = files[0] // only use files[0]\r\n\r\n      if (!this.isExcel(rawFile)) {\r\n        this.$message.error('Only supports upload .xlsx, .xls, .csv suffix files')\r\n        return false\r\n      }\r\n      this.upload(rawFile)\r\n      e.stopPropagation()\r\n      e.preventDefault()\r\n    },\r\n    handleDragover(e) {\r\n      e.stopPropagation()\r\n      e.preventDefault()\r\n      e.dataTransfer.dropEffect = 'copy'\r\n    },\r\n    handleUpload() {\r\n      this.$refs['excel-upload-input'].click()\r\n    },\r\n    handleClick(e) {\r\n      const files = e.target.files\r\n      const rawFile = files[0] // only use files[0]\r\n      console.log(rawFile)\r\n      if (!rawFile) return\r\n      this.upload(rawFile)\r\n    },\r\n    upload(rawFile) {\r\n      this.$refs['excel-upload-input'].value = null // fix can't select the same excel\r\n\r\n      if (!this.beforeUpload) {\r\n        this.readerData(rawFile)\r\n        return\r\n      }\r\n      const before = this.beforeUpload(rawFile)\r\n      if (before) {\r\n        this.readerData(rawFile)\r\n      }\r\n    },\r\n    readerData(rawFile) {\r\n      this.loading = true\r\n      return new Promise((resolve, reject) => {\r\n        const reader = new FileReader()\r\n        reader.onload = e => {\r\n          const data = e.target.result\r\n          const workbook = XLSX.read(data, { type: 'array' })\r\n          const firstSheetName = workbook.SheetNames[0]\r\n          const worksheet = workbook.Sheets[firstSheetName]\r\n          const header = this.getHeaderRow(worksheet)\r\n          const results = XLSX.utils.sheet_to_json(worksheet)\r\n          this.generateData({ header, results })\r\n          this.loading = false\r\n          resolve()\r\n        }\r\n        reader.readAsArrayBuffer(rawFile)\r\n      })\r\n    },\r\n    getHeaderRow(sheet) {\r\n      const headers = []\r\n      const range = XLSX.utils.decode_range(sheet['!ref'])\r\n      let C\r\n      const R = range.s.r\r\n      /* start in the first row */\r\n      for (C = range.s.c; C <= range.e.c; ++C) { /* walk every column in the range */\r\n        const cell = sheet[XLSX.utils.encode_cell({ c: C, r: R })]\r\n        /* find the cell in the first row */\r\n        let hdr = 'UNKNOWN ' + C // <-- replace with your desired default\r\n        if (cell && cell.t) hdr = XLSX.utils.format_cell(cell)\r\n        headers.push(hdr)\r\n      }\r\n      return headers\r\n    },\r\n    isExcel(file) {\r\n      return /\\.(xlsx|xls|csv)$/.test(file.name)\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n.uploadComponent{\r\n  .input{\r\n    display: none;\r\n  }\r\n  .drop{\r\n    height: 200px;\r\n    margin: 20px;\r\n    border: 2px dotted #333;\r\n    border-radius: 10px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    em{\r\n      text-decoration: underline;\r\n      cursor: pointer;\r\n      color: #409EFF;\r\n    }\r\n  }\r\n}\r\n</style>"]}]}